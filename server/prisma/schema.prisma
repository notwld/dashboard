// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  department    String?
  role          Role?           @relation(fields: [roleId], references: [id])
  roleId        Int?
  lead          Lead[]
  assignee      Lead[]          @relation("LeadAssignee")
  attendance    Attendance[]
  breaks        Break[]
  leaveRequests LeaveRequest[]
  leaveBalance  Int             @default(5)
  emailConfig   EmailConfig?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id         Int      @id @default(autoincrement())
  date       DateTime
  time       String
  platform   String
  firstCall  String
  comments   String?
  service    String
  name       String
  email      String
  number     String
  address    String?
  credits    Int      @default(0)
  cost       Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  assigneeId Int?
  status     String?
  assignee   User?    @relation("LeadAssignee", fields: [assigneeId], references: [id])
}

model Attendance {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  checkIn     DateTime  @default(now())
  checkOut    DateTime?
  isPresent   Boolean   @default(false)
  isOnLeave   Boolean   @default(false)
  isLate      Boolean   @default(false)
  totalHours  Float     @default(0)
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  leaveReason String?
  leaveType   String?
  leaveStatus LeaveStatus? @default(PENDING)
  breaks      Break[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Break {
  id           Int        @id @default(autoincrement())
  startTime    DateTime   @default(now())
  endTime      DateTime?
  duration     Float      @default(0)
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  attendanceId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model LeaveRequest {
  id          Int           @id @default(autoincrement())
  date        DateTime
  reason      String?
  status      LeaveStatus   @default(PENDING)
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Brand {
  id                    String   @id @default(cuid())
  name                  String
  description           String
  logo                  String?
  stripeSecretKey       String?
  stripePublishableKey  String?
  createdAt             DateTime @default(now())
}

model EmailConfig {
  id             Int      @id @default(autoincrement())
  emailAddress   String
  password       String
  serverType     String
  incomingServer String
  incomingPort   String
  outgoingServer String
  outgoingPort   String
  useSSL         Boolean  @default(true)
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}